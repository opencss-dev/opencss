@use 'sass:map';

$display: (
  block             : block,
  inline-block      : inline-block,
  inline            : inline,
  flex              : flex,
  inline-flex       : inline-flex,
  table             : table,
  inline-table      : inline-table,
  table-caption     : table-caption,
  table-cell        : table-cell,
  table-column      : table-column,
  table-column-group: table-column-group,
  table-footer-group: table-footer-group,
  table-header-group: table-header-group,
  table-row-group   : table-row-group,
  table-row         : table-row,
  flow-root         : flow-root,
  grid              : grid,
  inline-grid       : inline-grid,
  contents          : contents,
  list-item         : list-item,
  none              : none,
);

$flexbox: (
  0:flex,
  1:inline-flex,
);

$gridbox: (
  0:grid,
  1:inline-grid,
);

@each $_display, $value in $display {
  @each $br, $br_value in $breakpoint {
    [class^=#{$br}\:#{$_display}] {
      display: none;
    }

    @include from($br_value) {
      .#{$br}\:#{$_display} {
        display: $value;
      }
    }
  }
  @if ($_display != none) {
    .#{$_display} {
      display: $value;
  
      $i: 2;
  
      // Flexbox
      @for $x from 0 to $i {
        @if $_display == map.get($flexbox, $x) {
          flex-direction: row;

          @if $_display == 'inline-flex' {
            align-items: inherit;
            flex-wrap: wrap;
          }
        }
      }
  
      // CSS grid
      @for $x from 0 to $i {
        @if $_display == map.get($gridbox, $x) {
          gap: default('gutter');
        }
      }
    }

    @include breakpoint-from(#{$_display}) {
      display: $value;
  
      $i: 2;
  
      // Flexbox
      @for $x from 0 to $i {
        @if $_display == map.get($flexbox, $x) {
          flex-direction: row;

          @if $_display == 'inline-flex' {
            align-items: inherit;
            flex-wrap: wrap;
          }
        }
      }
  
      // CSS grid
      @for $x from 0 to $i {
        @if $_display == map.get($gridbox, $x) {
          gap: default('gutter');
        }
      }
    }
  }
}

.hidden {
  display: none
}

@include breakpoint-from(hidden) {
  display: none !important
}

.show {
  appearance: auto
}